name: GitHub Actions self hosted runner
on: workflow_dispatch
jobs:
  jobs1:
      runs-on: self-hosted
      steps:
        - run: |
            source activate pytorch_p36
            cd ~
            cd /home/ubuntu/projects_jonathan
            echo torchserve start!!!!!
#            torchserve --ts-config ./ts/config.properties --start --model-store ./model-store --models sem_pcyc=sem_pcyc2.0.mar
#            sleep 35s
#            echo model request start!!!!!
#            cd ~
#            echo request guitar
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T guitar.png
#            sleep 3s
#            echo request backyard
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T backyard.png
#            sleep 3s
#            echo request balloon
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T balloon.jpg
#            sleep 3s
#            echo request car
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T car.png
#            sleep 3s
#            echo request house
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T house.png
#            sleep 3s
#            echo request closet
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T closet.png
#            sleep 3s
#            echo request pavillon
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T pavillon.png
#            sleep 3s
#            echo request school
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T school.jpg
#            sleep 3s
#            echo request worktable
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T worktable.png
#            sleep 3s
#            echo request bike_racks
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T bike_racks.jpg
#            sleep 3s
#            echo request seats
#            curl http://0.0.0.0:8080/predictions/sem_pcyc -T seats.jpg
#            echo job 1 done!!!!!
            
  jobs2:
      needs: jobs1
      runs-on: self-hosted
      steps: 
      - env: 
          PEM_KEY: ${{ secrets.PEM_KEY }}
          AWS_IP: ${{ secrets.AWS_IP }}
          AWS_ID: ${{ secrets.AWS_ID }}
        run: |
          source activate pytorch_p36
          echo file transfer start!!!!!!!!!!!
#         echo word2vec.npy file transfer
#         scp -i ./${{ secrets.PEM_KEY }} /home/ubuntu/sem_pcyc/aux/Semantic/intersection/new_plus_words.npy ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/aux/Semantic/intersection
#         echo image_embedding.npy file transfer
#         scp -i ./${{ secrets.PEM_KEY }} /home/ubuntu/acc_im_em.npy ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/
#         echo model_best.pth file transfer
#         scp -i ./${{ secrets.PEM_KEY }} /home/ubuntu/model_best.pth ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/aux/CheckPoints/intersection/word2vec-google-news/64
#         echo image & sketch dataset transfer
#         scp -r -i ./${{ secrets.PEM_KEY }} /home/ubuntu/sem_pcyc/dataset/intersection/images/ ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/dataset/intersection/images
#         scp -r -i ./${{ secrets.PEM_KEY }} /home/ubuntu/sem_pcyc/dataset/intersection/sketches/ ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/dataset/intersection/sketches
#         echo sem_pcyc.mar file transfer && 중요!!version 명이 자동적으로 늘어나도록 바꿀 것!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#         scp -i ./${{ secrets.PEM_KEY }} /home/ubuntu/projects_jonathan/model-store/sem_pcyc2.0.mar ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/sem-pcyc/model-store

#         scp -i ./${{ secrets.PEM_KEY }} /home/ubuntu/backyard.png ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/sem-pcyc/  # scp test용 파일 전송
#         echo file transfer success!!!!!!
#         문제는 ssh로 접속은 가능하지만 다음 command로 넘어갔을 때 ssh접속을 끊고 nipa ssh에서 명령을 실행한다는 점이다.
#         일단 job2는 scp로 파일 전송만 하는 부분이기 때문에 확인은 했고 코드만 작성하고 넘어가자

    
      

  
        


