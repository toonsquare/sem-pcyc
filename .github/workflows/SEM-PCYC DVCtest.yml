name: CML & DVC
on: workflow_dispatch
jobs:
  jobs1:
    name: Get tha added dataset to the dataset path
    runs-on: self-hosted
    steps:
        - uses: actions/checkout@v2
        - uses: iterative/setup-dvc@v1
        - name: dvc pull dataset
          env:
             AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
             AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: |
            source activate pytorch_p36
            conda activate DVC
            cd /home/ubuntu
            dvc get https://github.com/toonsquare/sem-pcyc.git DVC/codes.tar    # test끝나고 intersection으로 바꾸기!!!
            sudo mv codes.tar /home/model-server/sem_pcyc/dataset
            cd /home/model-server/sem_pcyc/dataset
            sudo tar -xvf codes.tar
            ls -al
            echo Done!!
            
            
            
#   jobs2:
#       name: Create files and trian a model
#       needs: jobs1
#       runs-on: self-hosted
#       env: 
#           AWS_IP: ${{ secrets.AWS_IP }}
#           # S3로 접근하기 위한 ID와 KEY - 이걸 적기만 하면 자동으로 접근이 가능한가? 따로 적어줘야 하나 확인
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       steps:
#         - run: |
#             source activate pytorch_p36
#             cd ~
#             # Version 변수 설정
#             curl http://${{ secrets.AWS_IP }}:8081/models/sem_pcyc > model_version
#             myVersion=$(cat model_version | grep modelVersion | grep -o [0-9\.]* | awk '{printf "%.1f", $1 + 1}')
#             echo "다음에 등록할 버전은 $myVersion 버전입니다."
#             echo "################################################################"
            
#             # 추가된 class에 대한 word2vec 진행
#             cd /home/ubuntu/projects_jonathan/src
#             echo Create new_plus_words.npy!!!!!!!!!!!!!!
#             python newclass_word2vec.py
#             echo Create new_plus_words.npy done!!!!!!!!!!!!!!    
#             echo "################################################################"
            
#             # SEM-PCYC 학습 시작
#             echo SEM-PCYC model train start!!!!!!!!!!!!!
#             #python train.py --dataset intersection --dim-out 64 --semantic-models new_plus_words --epochs 1000 --early-stop 300 --lr 0.0001 --batch-size 32
#             echo SEM-PCYC model train done!!!!!!!!!!!!!!
#             echo "################################################################"
            
#             # Image embedding 생성
#             echo Create acc_im_em.npy!!!!!!!!!!!!!!
#             python mk_image_emd_npy.py
#             echo Create acc_im_em.npy done!!!!!!!!!!!!!!
#             echo "################################################################"
            
#             # 새로운 버전의 sem_pcyc.mar 생성
#             echo Create sem_pcyc.mar!!!!!!!!!!!!!!
#             cd ..
#             torch-model-archiver --model-name sem_pcyc$myVersion --version $myVersion --model-file ./src/models.py --serialized-file /home/model-server/sem_pcyc/aux/CheckPoints/intersection/new_plus_words/64/model_best.pth --handler ./ts/torch_handler/sem_pcyc_handler.py --extra-files /home/model-server/npy/acc_im_em.npy
#             echo Create sem_pcyc.mar done!!!!!!!!!!!!!!
#             mv -v ./sem_pcyc$myVersion.mar ./model-store
#             echo Move sem_pcyc$myVersion.mar to model store!!!!!!!!!!!!!!
            
#             # 생성된 파일들 DVC로 version 붙여서 data registry & remote storage에 push하기
#             echo Start data versioning the files
#             cd /home/model-server/sem_pcyc/aux/Semantic/intersection/
#             dvc add new_plus_words.npy
#             git add new_plus_words.npy.dvc
#             dvc push
            
#             cd /home/model-server/sem_pcyc/aux/CheckPoints/intersection/new_plus_words/64/
#             dvc add model_best.pth
#             git add model_best.pth.dvc
#             dvc push
            
#             cd /home/model-server/npy/
#             dvc add acc_im_em.npy
#             git add acc_im_em.npy.dvc
#             dvc push
            
#             cd /home/ubuntu/projects_jonathan/model-store/
#             dvc add sem_pcyc$myVersion.mar
#             git add sem_pcyc$myVersion.mar.dvc            
#             dvc push
            
#             git commit -m "dataset test version$myVersion, files version $myVersion"
#             git tag -a "v$myVersion" -m "dataset test version$myVersion"
#             git push origin main
#             git push --tags
    
    
#   jobs3:
#       name: Request
#       needs: jobs2
#       runs-on: self-hosted
#       env: 
#           AWS_IP: ${{ secrets.AWS_IP }}
#       steps:
#         - run: |
#             source activate pytorch_p36
#             cd ~
#             # Version 변수 설정
#             curl http://${{ secrets.AWS_IP }}:8081/models/sem_pcyc > model_version
#             myVersion=$(cat model_version | grep modelVersion | grep -o [0-9\.]* | awk '{printf "%.1f", $1 + 1}')
            
#             cd /home/ubuntu/projects_jonathan
#             echo torchserve start!!!!!
#             torchserve --ts-config ./ts/config.properties --start --model-store ./model-store --models sem_pcyc=sem_pcyc$myVersion.mar
#             sleep 50s
#             echo model request start!!!!!
#             cd ~
#             echo request guitar
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T guitar.png
#             sleep 5s
            
#             echo request backyard
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T backyard.png
#             sleep 5s
            
#             echo request balloon
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T balloon.jpg
#             sleep 5s
            
#             echo request car
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T car.png
#             sleep 5s
            
#             echo request house
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T house.png
#             sleep 5s
            
#             echo request closet
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T closet.png
#             sleep 5s
            
#             echo request pavillon
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T pavillon.png
#             sleep 5s
            
#             echo request school
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T school.jpg
#             sleep 5s
            
#             echo request worktable
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T worktable.png
#             sleep 5s
            
#             echo request bike_racks
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T bike_racks.jpg
#             sleep 5s
            
#             echo request seats
#             curl http://0.0.0.0:8080/predictions/sem_pcyc -T seats.jpg
            
#   jobs4:
#       name: Transfer files and remove the dataset
#       needs: jobs3
#       runs-on: self-hosted
#       steps: 
#       - env: 
#           PEM_KEY: ${{ secrets.PEM_KEY }}
#           AWS_IP: ${{ secrets.AWS_IP }}
#           AWS_ID: ${{ secrets.AWS_ID }}
#         run: |
#           source activate pytorch_p36
#           # Version 변수 설정
#           curl http://${{ secrets.AWS_IP }}:8081/models/sem_pcyc > model_version
#           myVersion=$(cat model_version | grep modelVersion | grep -o [0-9\.]* | awk '{printf "%.1f", $1 + 1}')
          
#           cd ~
#           echo file transfer start!!!!!!!!!!!
#           echo word2vec.npy file transfer!!!!!!!!!!!!!
#           scp -i ./${{ secrets.PEM_KEY }} /home/model-server/sem_pcyc/aux/Semantic/intersection/new_plus_words.npy ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/aux/Semantic/intersection
#           echo image_embedding.npy file transfer!!!!!!!!!!!!!
#           scp -i ./${{ secrets.PEM_KEY }} /home/model-server/npy/acc_im_em.npy ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/npy
#           echo model_best.pth file transfer!!!!!!!!!!!!! 
#           scp -i ./${{ secrets.PEM_KEY }} /home/model-server/sem_pcyc/aux/CheckPoints/intersection/new_plus_words/64/model_best.pth ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/aux/CheckPoints/intersection/new_plus_words/64
#           echo image and sketch dataset transfer!!!!!!!!!!!!!
#           scp -r -i ./${{ secrets.PEM_KEY }} /home/model-server/sem_pcyc/dataset/intersection/images/ ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/dataset/intersection/images
#           scp -r -i ./${{ secrets.PEM_KEY }} /home/model-server/sem_pcyc/dataset/intersection/sketches/ ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/ml_data/sem_pcyc/dataset/intersection/sketches
#           echo sem_pcyc.mar file transfer!!!!!!!!!!!!!
#           scp -i ./${{ secrets.PEM_KEY }} /home/ubuntu/projects_jonathan/model-store/sem_pcyc$myVersion.mar ${{ secrets.AWS_ID }}@${{ secrets.AWS_IP }}:/home/ubuntu/sem-pcyc/model-store
#           echo file transfer success!!!!!!
          
#           echo start remove the intersection!!!!!!!!!!!
#           # dvc get을 통해 data를 가져올 때 이미 있으면 덮어쓰지 않고 오류를 내므로 지워줘야 한다.
#           rm -rf intersection
#           # 굳이 생성된 file들을 삭제해 줄 필요는 없는 것 같다. 가져오는 것은 dataset뿐이기 때문에
          
#   jobs5:
#       name: Resgister a model
#       needs: jobs4
#       runs-on: self-hosted
#       steps: 
#       - env: 
#           AWS_IP: ${{ secrets.AWS_IP }}
#         run: |
#           source activate pytorch_p36
#           # Version 변수 설정
#           curl http://${{ secrets.AWS_IP }}:8081/models/sem_pcyc > model_version
#           myVersion=$(cat model_version | grep modelVersion | grep -o [0-9\.]* | awk '{printf "%.1f", $1 + 1}')
#           echo present model check!!!!!!!!!!!!!
#           curl http://${{ secrets.AWS_IP }}:8081/models/sem_pcyc
#          echo model register!!!!!!!!!!!!!
#          curl -X POST "http://${{ secrets.AWS_IP }}:8081/models?model_name=sem_pcyc&url=/home/ubuntu/sem-pcyc/model-store/sem_pcyc$myVersion.mar"
#          echo change default model!!!!!!!!!!!!!
#          curl -v -X PUT http://${{ secrets.AWS_IP }}:8081/models/sem_pcyc/$myVersion/set-default
#          echo new model check!!!!!!!!!!!!!
#          curl http://${{ secrets.AWS_IP }}:8081/models/sem_pcyc
#          echo sem_pcyc$myVersion이 등록되었습니다.




    
    
    
    
    
    
    
    
    
    


